#include <algorithm>
#include <iostream>
#include <iterator>
#include <random>
#include <vector>
#include <unordered_map>
 
struct customHash{
    inline std::size_t operator()(const std::vector<int> &v) const {
        
        return v.at(0)*100;
    }    
};

 
int main()
{
    std::vector<int> v {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
 
    std::random_device rd;
    std::mt19937 g(rd());
 
    std::shuffle(v.begin(), v.end(), g);
 
    std::copy(v.begin(), v.end(), std::ostream_iterator<int>(std::cout, " "));
    std::cout << '\n';
    
    std::pair<std::vector<int>, float> p1{v, 1.1};

    std::unordered_map<std::vector<int>, int, customHash> dict;
    //u.insert(std::make_pair(int, std::vector<int>()));
    dict.insert({v, 2});
    dict.insert({std::vector<int>{2,2,3}, 2});
    dict.insert({std::vector<int>{1,2,3}, 2});
    

    std::cout << dict.size() << "\n";
    
    std::cout << "dict: { ";
    for (auto const& [key, value] : dict)
        std::cout << "[" << key[0] << "]=" << value << " ";
    std::cout << "}\n\n";
 
    //for (int i{1}; i != 8; ++i)
    //    std::cout << "dict.count(" << i << ") = " << dict[0] << '\n';
}



